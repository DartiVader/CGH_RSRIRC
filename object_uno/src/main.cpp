#include <Arduino.h>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
#define ULTRASONIC_PIN 8
#define STATUS_LED_PIN 13
#define PULSE_INTERVAL 2000  // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –®–ò–ú
const int pwmChannel = 0;
const int pwmFrequency = 40000; // 40 kHz
const int pwmResolution = 8;
const int pwmDutyCycle = 127; // 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ

// –ö–æ–¥ –æ–±—ä–µ–∫—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å)
const int objectCode[] = {1};
const int codeLength = 1;

void setupPWM() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –®–ò–ú –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 40 –∫–ì—Ü
  ledcSetup(pwmChannel, pwmFrequency, pwmResolution);
  ledcAttachPin(ULTRASONIC_PIN, pwmChannel);
  ledcWrite(pwmChannel, 0); // –í—ã–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª

  Serial.println("‚úÖ PWM initialized: 40kHz on pin " + String(ULTRASONIC_PIN));
}

void generateTone(bool state) {
  if (state) {
    ledcWrite(pwmChannel, pwmDutyCycle);
  } else {
    ledcWrite(pwmChannel, 0);
  }
}

void emitCodedPulse() {
  Serial.println("üöÄ EMITTING CODED ULTRASOUND PULSE");

  const int pulseDuration = 15;    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞ (–º—Å)
  const int betweenPulseDelay = 5; // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏

  for (int i = 0; i < codeLength; i++) {
    for (int j = 0; j < objectCode[i]; j++) {
      generateTone(true);
      delay(pulseDuration);
      generateTone(false);
      if (j < objectCode[i] - 1) {
        delay(betweenPulseDelay);
      }
    }
  }

  Serial.println("‚úÖ Coded pulse completed");
}

void setup() {
  pinMode(STATUS_LED_PIN, OUTPUT);
  Serial.begin(115200);

  Serial.println("=== üéØ ULTRASOUND OBJECT - CODED PULSES ===");
  Serial.println("üîä 40kHz PWM with coded identification");

  setupPWM();
}

void loop() {
  // –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 500) {
    digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
    lastBlink = millis();
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤
  static unsigned long lastPulse = 0;
  if (millis() - lastPulse > PULSE_INTERVAL) {
    lastPulse = millis();

    emitCodedPulse();

    // –ë—ã—Å—Ç—Ä–æ–µ –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏
    for(int i = 0; i < 3; i++) {
      digitalWrite(STATUS_LED_PIN, HIGH);
      delay(80);
      digitalWrite(STATUS_LED_PIN, LOW);
      delay(80);
    }
  }

  delay(100);
}
