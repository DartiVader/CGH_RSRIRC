#include <Arduino.h>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Arduino Uno —Å —É—Å–∏–ª–∏—Ç–µ–ª–µ–º PAM8403
#define ULTRASONIC_PIN 8        // Pin 8 ‚Üí L —É—Å–∏–ª–∏—Ç–µ–ª—è
#define STATUS_LED_PIN 13       // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥
#define PULSE_INTERVAL 2000     // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)

void testAmplifier();
void emitSinglePulse();
void emitCodedPulse();
void emitCalibrationTone();


// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–Ω–∞ (Arduino Uno –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –®–ò–ú 40kHz –Ω–∞–ø—Ä—è–º—É—é)
const int TONE_FREQUENCY = 40000; // 40 kHz
const int PULSE_DURATION = 15;    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞ –≤ –º—Å

// –ö–æ–¥ –æ–±—ä–µ–∫—Ç–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã)
const int OBJECT_ID_PULSES = 3;   // 3 –∏–º–ø—É–ª—å—Å–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

void setup() {
  pinMode(STATUS_LED_PIN, OUTPUT);
  pinMode(ULTRASONIC_PIN, OUTPUT);
  digitalWrite(ULTRASONIC_PIN, LOW); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ

  Serial.begin(115200);
  delay(1000);

  Serial.println("\n=== üéØ ULTRASOUND OBJECT - ARDUINO UNO ===");
  Serial.println("üîä Amplifier: PAM8403");
  Serial.println("üìå Connection: Pin 8 ‚Üí L, 5V ‚Üí +, GND ‚Üí - & G");
  Serial.println("üîà Speaker: 8Œ© 1W");
  Serial.println("üìç Object ID: " + String(OBJECT_ID_PULSES) + " pulses");

  // –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  Serial.println("\nüîä INITIAL AMPLIFIER TEST...");
  testAmplifier();

  Serial.println("\n‚úÖ Object initialization completed!");
  Serial.println("üì° Ready to emit pulses every " + String(PULSE_INTERVAL/1000) + " seconds");
}

void testAmplifier() {
  Serial.println("üéµ Testing amplifier and speaker...");
  digitalWrite(STATUS_LED_PIN, HIGH);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω 1 —Å–µ–∫—É–Ω–¥—É
  for(int i = 0; i < 3; i++) {
    Serial.println("   Beep " + String(i+1));
    emitSinglePulse();
    delay(300);
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  Serial.println("‚úÖ Amplifier test completed");
}

void emitSinglePulse() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 40kHz —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
  unsigned long startTime = micros();
  while (micros() - startTime < PULSE_DURATION * 1000) { // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
    digitalWrite(ULTRASONIC_PIN, HIGH);
    delayMicroseconds(12); // –ü–æ–ª—É–ø–µ—Ä–∏–æ–¥ 40kHz ‚âà 12.5Œºs
    digitalWrite(ULTRASONIC_PIN, LOW);
    delayMicroseconds(12);
  }
}

void emitCodedPulse() {
  Serial.println("üöÄ EMITTING CODED ULTRASOUND PULSE");
  Serial.println("   Pattern: " + String(OBJECT_ID_PULSES) + " pulses");

  digitalWrite(STATUS_LED_PIN, HIGH); // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏

  for (int i = 0; i < OBJECT_ID_PULSES; i++) {
    Serial.println("   üîä Pulse " + String(i+1) + "/" + String(OBJECT_ID_PULSES));
    emitSinglePulse();

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏
    if (i < OBJECT_ID_PULSES - 1) {
      delay(10); // 10ms –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏
    }
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  Serial.println("‚úÖ Coded pulse completed");
}

void emitCalibrationTone() {
  Serial.println("üéµ CALIBRATION TONE - 500ms");
  digitalWrite(STATUS_LED_PIN, HIGH);

  // –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  unsigned long startTime = millis();
  while (millis() - startTime < 500) {
    digitalWrite(ULTRASONIC_PIN, HIGH);
    delayMicroseconds(12);
    digitalWrite(ULTRASONIC_PIN, LOW);
    delayMicroseconds(12);
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  Serial.println("‚úÖ Calibration completed");
}

void loop() {
  // –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000) {
    digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
    lastBlink = millis();
  }

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤
  static unsigned long lastPulse = 0;
  if (millis() - lastPulse > PULSE_INTERVAL) {
    lastPulse = millis();

    Serial.println("\n=== üöÄ PULSE CYCLE ===");
    emitCodedPulse();

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    Serial.println("‚è∞ Next pulse in: " + String(PULSE_INTERVAL/1000) + "s");
    Serial.println("üïí Uptime: " + String(millis()/1000) + "s");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Serial –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "TEST" || command == "t") {
      Serial.println("üîä MANUAL TEST PULSE");
      emitCodedPulse();
    } else if (command == "CALIBRATE" || command == "c") {
      emitCalibrationTone();
    } else if (command == "STATUS" || command == "s") {
      Serial.println("=== OBJECT STATUS ===");
      Serial.println("üîä Amplifier: PAM8403");
      Serial.println("üîà Speaker: 8Œ© 1W");
      Serial.println("üìå Pin: " + String(ULTRASONIC_PIN));
      Serial.println("üìç Pulse pattern: " + String(OBJECT_ID_PULSES) + " pulses");
      Serial.println("‚è∞ Interval: " + String(PULSE_INTERVAL/1000) + " seconds");
      Serial.println("üïí Uptime: " + String(millis()/1000) + "s");
    } else if (command == "SINGLE" || command == "1") {
      Serial.println("üîä SINGLE PULSE");
      emitSinglePulse();
    } else if (command == "HELP" || command == "h") {
      Serial.println("=== AVAILABLE COMMANDS ===");
      Serial.println("TEST/t - Manual test pulse");
      Serial.println("CALIBRATE/c - Calibration tone");
      Serial.println("STATUS/s - System status");
      Serial.println("SINGLE/1 - Single pulse");
      Serial.println("HELP/h - This help");
    }
  }

  delay(50);
}
