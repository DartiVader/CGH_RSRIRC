#include <Arduino.h>

#define ULTRASONIC_PIN 8        // Pin 8 ‚Üí PAM8403 L
#define ESP_TRIGGER_PIN 2       // –ü–∏–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç ESP32
#define STATUS_LED_PIN 13       // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–∞
const int PULSE_DURATION = 15;    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞ –≤ –º—Å
const int OBJECT_ID_PULSES = 3;   // 3 –∏–º–ø—É–ª—å—Å–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

bool espCommandActive = false;
unsigned long lastCommandTime = 0;

// üî• –î–û–ë–ê–í–¨–¢–ï –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô –ü–ï–†–ï–î setup()
void testUltrasound();
void emitSinglePulse();
void emitCodedPulse();
void checkEspCommand();

void setup() {
  pinMode(STATUS_LED_PIN, OUTPUT);
  pinMode(ULTRASONIC_PIN, OUTPUT);
  pinMode(ESP_TRIGGER_PIN, INPUT);

  digitalWrite(ULTRASONIC_PIN, LOW);

  Serial.begin(115200);
  delay(1000);

  Serial.println("\n=== üéØ ARDUINO UNO - ULTRASOUND GENERATOR ===");
  Serial.println("üîä Amplifier: PAM8403");
  Serial.println("üìå Ultrasound Pin: " + String(ULTRASONIC_PIN));
  Serial.println("ü§ñ ESP32 Trigger Pin: " + String(ESP_TRIGGER_PIN));
  Serial.println("üìç Object ID: " + String(OBJECT_ID_PULSES) + " pulses");

  // –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
  testUltrasound();
  Serial.println("\n‚úÖ Arduino ready! Waiting for ESP32 commands...");
}

void testUltrasound() {
  Serial.println("üéµ Testing ultrasound generator...");
  digitalWrite(STATUS_LED_PIN, HIGH);

  for(int i = 0; i < 2; i++) {
    Serial.println("   Pulse " + String(i+1));
    emitSinglePulse();
    delay(200);
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  Serial.println("‚úÖ Ultrasound test completed");
}

void emitSinglePulse() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 40kHz —Å–∏–≥–Ω–∞–ª
  unsigned long startTime = micros();
  while (micros() - startTime < PULSE_DURATION * 1000) {
    digitalWrite(ULTRASONIC_PIN, HIGH);
    delayMicroseconds(12); // –ü–æ–ª—É–ø–µ—Ä–∏–æ–¥ 40kHz
    digitalWrite(ULTRASONIC_PIN, LOW);
    delayMicroseconds(12);
  }
}

void emitCodedPulse() {
  Serial.println("üöÄ EMITTING CODED ULTRASOUND");
  digitalWrite(STATUS_LED_PIN, HIGH);

  for (int i = 0; i < OBJECT_ID_PULSES; i++) {
    Serial.println("   üîä Pulse " + String(i+1) + "/" + String(OBJECT_ID_PULSES));
    emitSinglePulse();

    if (i < OBJECT_ID_PULSES - 1) {
      delay(10); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏
    }
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  Serial.println("‚úÖ Coded pulse completed");
}

void checkEspCommand() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç ESP32
  if (digitalRead(ESP_TRIGGER_PIN) == HIGH) {
    if (!espCommandActive) {
      espCommandActive = true;
      lastCommandTime = millis();
      Serial.println("üéØ ESP32 COMMAND RECEIVED!");
      emitCodedPulse();
    }
  } else {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 100ms –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if (espCommandActive && (millis() - lastCommandTime > 100)) {
      espCommandActive = false;
    }
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç ESP32
  checkEspCommand();

  // –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000 && !espCommandActive) {
    digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
    lastBlink = millis();
  }

  // –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–µ—Å–ª–∏ ESP32 –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç)
  static unsigned long lastAutoPulse = 0;
  if (millis() - lastAutoPulse > 5000 && !espCommandActive) { // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    lastAutoPulse = millis();
    Serial.println("üîÑ AUTO: Emitting pulse");
    emitCodedPulse();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Serial –∫–æ–º–∞–Ω–¥
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "TEST" || command == "t") {
      Serial.println("üîä MANUAL TEST");
      emitCodedPulse();
    } else if (command == "STATUS" || command == "s") {
      Serial.println("=== ARDUINO STATUS ===");
      Serial.println("üîä Ultrasound Pin: " + String(ULTRASONIC_PIN));
      Serial.println("ü§ñ ESP32 Trigger: " + String(ESP_TRIGGER_PIN));
      Serial.println("üìç Pulse Pattern: " + String(OBJECT_ID_PULSES));
      Serial.println("üì° ESP Control: " + String(espCommandActive ? "ACTIVE" : "INACTIVE"));
      Serial.println("üïí Uptime: " + String(millis()/1000) + "s");
    } else if (command == "HELP" || command == "h") {
      Serial.println("=== ARDUINO COMMANDS ===");
      Serial.println("TEST/t - Manual test pulse");
      Serial.println("STATUS/s - System status");
      Serial.println("HELP/h - This help");
    }
  }

  delay(50);
}
