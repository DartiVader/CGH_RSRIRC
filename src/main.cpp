#include <Arduino.h>
#include "config/config.h"
#include "positioning/positioning.h"
#include "network/wifi_manager.h"
#include "hardware/ultrasound.h"

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–°–ò–í–ï–†–ê =====
#ifdef RECEIVER_NODE

// –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–µ—Å–∏–≤–µ—Ä–∞
PositioningSystem positioning;
WiFiManager wifi;
Ultrasound ultrasound;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üöÄ POSITIONING SYSTEM - RECEIVER ===");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Serial.println("Initializing positioning system...");
    positioning.begin();

    Serial.println("Starting WiFi Access Point...");
    wifi.setupAP();

    Serial.println("Starting UDP server...");
    wifi.startUDP();

    Serial.println("Setting up ultrasound receiver...");
    ultrasound.setupReceiver();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Receiver initialization completed!");
    Serial.println("üì° Waiting for beacons to connect...");
}

void loop() {
    // –ú–∏–≥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º (–∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã)
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 500) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    static unsigned long lastBeaconCheck = 0;
    static unsigned long lastPositionUpdate = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–∞—è–∫–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    if (millis() - lastBeaconCheck > 3000) {
        lastBeaconCheck = millis();
        int stations = WiFi.softAPgetStationNum();
        Serial.println("üì° Connected beacons: " + String(stations));

        if (stations > 0) {
            wifi.sendUDPBroadcast("START");
            Serial.println("üì§ Sent START command to all beacons");
        } else {
            Serial.println("‚è≥ Waiting for beacons to connect...");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ –∏–º–ø—É–ª—å—Å—ã
    if (ultrasound.detectPulse()) {
        unsigned long pulseTime = micros();
        Serial.println("üéØ Ultrasound pulse detected! Time: " + String(pulseTime));
        // –ó–¥–µ—Å—å –±—É–¥–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏–º–ø—É–ª—å—Å–∞ –¥–ª—è TDOA
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    if (millis() - lastPositionUpdate > 5000) {
        lastPositionUpdate = millis();
        positioning.update();
        Position pos = positioning.getCurrentPosition();

        Serial.printf("üìç Position: X=%.1fcm, Y=%.1fcm, Accuracy=%.1fcm\n",
                     pos.x, pos.y, pos.accuracy);
    }

    delay(50);
}

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ê–Ø–ö–ê =====
#elif BEACON_NODE

// –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –º–∞—è–∫–∞
WiFiManager wifi;
Ultrasound ultrasound;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üéØ POSITIONING SYSTEM - BEACON ===");
    Serial.println("Beacon ID: " + String(BEACON_ID));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Serial.println("Connecting to WiFi...");
    wifi.setupSTA();

    Serial.println("Starting UDP client...");
    wifi.startUDP();

    Serial.println("Setting up ultrasound transmitter...");
    ultrasound.setupTransmitter();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Beacon initialization completed!");
    Serial.println("üì° Connected to: " + String(WiFi.SSID()));
    Serial.println("üì∂ IP address: " + WiFi.localIP().toString());
}

void loop() {
    // –ú–∏–≥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º (–∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã)
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 1000) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ UDP —Å–æ–æ–±—â–µ–Ω–∏—è
    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[50];
        int len = wifi.udp.read(packet, 50);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);

            Serial.println("üì® Received: " + message);

            if (message == "START") {
                Serial.println("üöÄ Starting ultrasound pulse...");

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
                delay(random(50, 200));

                // –ò–∑–ª—É—á–∞–µ–º —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∏–º–ø—É–ª—å—Å
                ultrasound.emitPulse(BEACON_ID);
                Serial.println("‚úÖ Pulse emitted with ID: " + String(BEACON_ID));

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                String ackMessage = "ACK_BEACON_" + String(BEACON_ID);
                wifi.sendUDPBroadcast(ackMessage);
                Serial.println("üì§ Sent: " + ackMessage);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å WiFi –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    static unsigned long lastWifiCheck = 0;
    if (millis() - lastWifiCheck > 15000) {
        lastWifiCheck = millis();
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("üîÑ WiFi disconnected! Attempting reconnect...");
            wifi.setupSTA();
        } else {
            Serial.println("üì∂ WiFi: Connected to " + String(WiFi.SSID()));
        }
    }

    delay(100);
}

// ===== –ï–°–õ–ò –ù–ò –û–î–ù–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï –í–´–ë–†–ê–ù–ê =====
#else
#error "Please define either RECEIVER_NODE or BEACON_NODE in build flags"
#endif
