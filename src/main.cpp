#include <Arduino.h>
#include "config/config.h"
#include "positioning/positioning.h"
#include "network/wifi_manager.h"
#include "hardware/ultrasound.h"
#include "WIFI_App/WIFI_App.h"

#include "web_server/web_server.h"
// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–°–ò–í–ï–†–ê =====
#ifdef RECEIVER_NODE

PositioningSystem positioning;
WiFiManager wifi;
Ultrasound ultrasound;
WIFI_App wifiApp;
WebService webService;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è TDOA
unsigned long pulseArrivalTimes[3] = {0};
bool pulseDetected[3] = {false};

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üöÄ POSITIONING SYSTEM - RECEIVER ===");
    Serial.println("Mode: TDOA with Web Interface");

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi AP
    Serial.println("üì° Starting WiFi Access Point...");
    wifiApp.begin();

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    Serial.println("üåê Starting Web Server...");
    webService.begin();

    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    positioning.begin();
    wifi.startUDP();
    ultrasound.setupReceiver();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Receiver initialization completed!");
    Serial.println("üì∂ Connect to WiFi: " + String(WIFI_SSID));
    Serial.println("üåê Open in browser: http://" + WiFi.softAPIP().toString());
}

void loop() {
    // –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 1000) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ START –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã
    static unsigned long lastStartCommand = 0;
    if (webService.isMeasuring() && millis() - lastStartCommand > 2000) {
        lastStartCommand = millis();

        Serial.println("üîÑ SENDING START COMMAND TO BEACONS...");
        wifi.sendUDPBroadcast("START");

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –æ–∂–∏–¥–∞–Ω–∏—è
        memset(pulseDetected, 0, sizeof(pulseDetected));
        pulseArrivalTimes[0] = micros();
    }

    // –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞
    static unsigned long lastSensorRead = 0;
    if (millis() - lastSensorRead > 100) {
        lastSensorRead = millis();

        if (ultrasound.detectPulse()) {
            unsigned long arrivalTime = micros();
            pulseArrivalTimes[0] = arrivalTime;
            pulseDetected[0] = true;

            Serial.println("üéØ PULSE DETECTED! Time: " + String(arrivalTime));
            wifi.sendUDPBroadcast("REQUEST_TIME:" + String(arrivalTime));
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö UDP —Å–æ–æ–±—â–µ–Ω–∏–π
    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[150];
        int len = wifi.udp.read(packet, 150);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);

            if (message.startsWith("BEACON_TIME:")) {
                int beaconId = message.substring(12, 13).toInt();
                unsigned long beaconTime = message.substring(14).toInt();

                pulseArrivalTimes[beaconId] = beaconTime;
                pulseDetected[beaconId] = true;

                Serial.println("üìä Beacon " + String(beaconId) + " time: " + String(beaconTime));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º TDOA
                if (pulseDetected[0] && pulseDetected[1] && pulseDetected[2]) {
                    Serial.println("üéØ TDOA CALCULATION POSSIBLE!");
                    memset(pulseDetected, 0, sizeof(pulseDetected));
                }
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    static unsigned long lastPositionUpdate = 0;
    if (millis() - lastPositionUpdate > 500) {
        lastPositionUpdate = millis();

        positioning.update();
        Position pos = positioning.getCurrentPosition();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞
        PositionData webPos;
        webPos.x = pos.x;
        webPos.y = pos.y;
        webPos.accuracy = pos.accuracy;
        webPos.timestamp = millis();
        webPos.valid = (pos.accuracy < 50.0);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–∏—Å
        webService.updatePosition(webPos);

        Serial.printf("üìç Position: X=%.1fcm, Y=%.1fcm, Accuracy=%.1fcm\n",
                     pos.x, pos.y, pos.accuracy);
    }

    delay(50);
}

void checkTDOA() {
    if (pulseDetected[0] && pulseDetected[1] && pulseDetected[2]) {
        Serial.println("üéØ TDOA CALCULATION POSSIBLE!");
        Serial.println("   Receiver: " + String(pulseArrivalTimes[0]));
        Serial.println("   Beacon 1: " + String(pulseArrivalTimes[1]));
        Serial.println("   Beacon 2: " + String(pulseArrivalTimes[2]));

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏
        long diff1 = pulseArrivalTimes[1] - pulseArrivalTimes[0];
        long diff2 = pulseArrivalTimes[2] - pulseArrivalTimes[0];

        Serial.println("   Time differences: " + String(diff1) + "us, " + String(diff2) + "us");

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ TDOA
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–∑ positioning system

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        memset(pulseDetected, 0, sizeof(pulseDetected));
    }
}

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ê–Ø–ö–ê =====
#elif BEACON_NODE

WiFiManager wifi;
Ultrasound ultrasound;

// –û–ë–™–Ø–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–ò –î–û –ò–• –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
void testSpeaker();
void emitSimplePulse();

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üéØ POSITIONING SYSTEM - BEACON ===");
    Serial.println("Beacon ID: " + String(BEACON_ID));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Serial.println("Connecting to WiFi...");
    wifi.setupSTA();

    Serial.println("Starting UDP client...");
    wifi.startUDP();

    Serial.println("Setting up ultrasound transmitter...");
    ultrasound.setupTransmitter();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    Serial.println("üîä TEST: Initial speaker test...");
    testSpeaker();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Beacon initialization completed!");
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∞
void testSpeaker() {
    Serial.println("üéµ Testing speaker...");

    #ifdef BEACON_NODE
    #if BEACON_ID == 1
    Serial.println("   KY-006 Passive Buzzer Test");
    // –¢–µ—Å—Ç –¥–ª—è KY-006 - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    for(int i = 0; i < 3; i++) {
        digitalWrite(STATUS_LED_PIN, HIGH);
        Serial.println("   Beep " + String(i+1) + " - Generating 40kHz");

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 40kHz –Ω–∞ 200ms
        unsigned long startTime = micros();
        while (micros() - startTime < 200000) { // 200ms
            digitalWrite(ULTRASOUND_TX_PIN, HIGH);
            delayMicroseconds(12);
            digitalWrite(ULTRASOUND_TX_PIN, LOW);
            delayMicroseconds(12);
        }

        digitalWrite(STATUS_LED_PIN, LOW);
        delay(200);
    }

    #elif BEACON_ID == 2
    Serial.println("   KY-012 Active Buzzer Test");
    // –¢–µ—Å—Ç –¥–ª—è KY-012 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –®–ò–ú
    for(int i = 0; i < 3; i++) {
        digitalWrite(STATUS_LED_PIN, HIGH);
        Serial.println("   Beep " + String(i+1) + " - PWM 40kHz");

        // –í–∫–ª—é—á–∞–µ–º –®–ò–ú –Ω–∞ 200ms
        ledcWrite(0, 127);
        delay(200);
        ledcWrite(0, 0);

        digitalWrite(STATUS_LED_PIN, LOW);
        delay(200);
    }
    #endif
    #endif

    Serial.println("‚úÖ Speaker test completed");
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–ª—É—á–µ–Ω–∏—è —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–∞
void emitSimplePulse() {
    Serial.println("üîä EMITTING ULTRASOUND PULSE");

    #ifdef BEACON_NODE
    #if BEACON_ID == 1
    // KY-006 - –ø–∞—Å—Å–∏–≤–Ω—ã–π –∑—É–º–º–µ—Ä
    Serial.println("   KY-006: Software 40kHz generation");
    unsigned long startTime = micros();
    long cycleCount = 0;

    while (micros() - startTime < 100000) { // 100ms
        digitalWrite(ULTRASOUND_TX_PIN, HIGH);
        delayMicroseconds(12);
        digitalWrite(ULTRASOUND_TX_PIN, LOW);
        delayMicroseconds(12);
        cycleCount++;
    }
    Serial.println("   Generated " + String(cycleCount) + " cycles");

    #elif BEACON_ID == 2
    // KY-012 - –∞–∫—Ç–∏–≤–Ω—ã–π –∑—É–º–º–µ—Ä
    Serial.println("   KY-012: PWM 40kHz");
    ledcWrite(0, 127); // –í–∫–ª—é—á–∞–µ–º –®–ò–ú
    delay(100); // 100ms
    ledcWrite(0, 0);   // –í—ã–∫–ª—é—á–∞–µ–º –®–ò–ú
    Serial.println("   PWM tone completed");
    #endif
    #endif
}

void loop() {
    // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 1000) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ UDP —Å–æ–æ–±—â–µ–Ω–∏—è
    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[100];
        int len = wifi.udp.read(packet, 100);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);
            String senderIP = wifi.udp.remoteIP().toString();

            Serial.println("=== üì® UDP MESSAGE RECEIVED ===");
            Serial.println("   From: " + senderIP);
            Serial.println("   Message: " + message);
            Serial.println("   Length: " + String(len));

            if (message == "START") {
                Serial.println("üöÄ START COMMAND RECEIVED - EMITTING SOUND!");

                // –ë—ã—Å—Ç—Ä–æ–µ –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                for(int i = 0; i < 5; i++) {
                    digitalWrite(STATUS_LED_PIN, HIGH);
                    delay(100);
                    digitalWrite(STATUS_LED_PIN, LOW);
                    delay(100);
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
                int delayTime = 100 + (BEACON_ID * 100); // –†–∞–∑–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—è–∫–∞
                Serial.println("‚è≥ Waiting " + String(delayTime) + "ms before sound...");
                delay(delayTime);

                // –ò–ó–î–ê–ï–ú –ó–í–£–ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Å–Ω–∞—á–∞–ª–∞
                Serial.println("üîä EMITTING ULTRASOUND PULSE...");

                // –°–ø–æ—Å–æ–± 1: –ü—Ä–æ—Å—Ç–æ–π –®–ò–ú —Å–∏–≥–Ω–∞–ª (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
                emitSimplePulse();

                Serial.println("‚úÖ Ultrasound emission completed");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                unsigned long currentTime = micros();
                String ackMessage = "BEACON_TIME:" + String(BEACON_ID) + ":" + String(currentTime);
                wifi.sendUDPBroadcast(ackMessage);
                Serial.println("üì§ Sent time: " + ackMessage);

            } else {
                Serial.println("‚ùì Unknown command: " + message);
            }
        }
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    static unsigned long lastDiagnostic = 0;
    if (millis() - lastDiagnostic > 10000) {
        lastDiagnostic = millis();
        Serial.println("=== üîç BEACON DIAGNOSTIC ===");
        Serial.println("   WiFi: " + String(WiFi.SSID()) + " (" + String(WiFi.RSSI()) + "dBm)");
        Serial.println("   IP: " + WiFi.localIP().toString());
        Serial.println("   Status: Waiting for START command");
        Serial.println("   Beacon ID: " + String(BEACON_ID));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi
    static unsigned long lastWifiCheck = 0;
    if (millis() - lastWifiCheck > 10000) {
        lastWifiCheck = millis();
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("üîÑ WiFi reconnecting...");
            wifi.setupSTA();
        } else {
            Serial.println("üì∂ WiFi: " + String(WiFi.SSID()) + " (" + String(WiFi.RSSI()) + "dBm)");
        }
    }

    delay(100);
}

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–ê =====
#elif OBJECT_NODE

// –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
WiFiManager wifi;
Ultrasound ultrasound;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üéØ POSITIONING SYSTEM - OBJECT ===");
    Serial.println("Node: " + String(NODE_TYPE));
    Serial.println("Sensor: " + String(SENSOR_TYPE));

    Serial.println("Setting up ultrasound transmitter with PWM...");
    ultrasound.setupTransmitter(); // –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –®–ò–ú

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Serial.println("Connecting to WiFi...");
    wifi.setupSTA();

    Serial.println("Starting UDP client...");
    wifi.startUDP();

    Serial.println("Setting up ultrasound transmitter...");
    ultrasound.setupTransmitter();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Object initialization completed!");
    Serial.println("üì° Connected to: " + String(WiFi.SSID()));
    Serial.println("üì∂ IP address: " + WiFi.localIP().toString());
    Serial.println("üîä Ready to emit ultrasound pulses every " + String(OBJECT_PULSE_INTERVAL/1000000) + " seconds");
}

void loop() {
    // –ë—ã—Å—Ç—Ä–æ–µ –º–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º (–∏–Ω–¥–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 100) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∏–∑–ª—É—á–µ–Ω–∏–µ —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤
    static unsigned long lastPulseTime = 0;
    if (micros() - lastPulseTime > OBJECT_PULSE_INTERVAL) {
        lastPulseTime = micros();

        Serial.println("üöÄ EMITTING CODED ULTRASOUND PULSE...");

        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–ø—É–ª—å—Å–∞–º–∏
        ultrasound.emitCodedPulse(255); // 255 = ID –æ–±—ä–µ–∫—Ç–∞

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏–∑–ª—É—á–µ–Ω–∏–∏
        String pulseMessage = "OBJECT_PULSE:" + String(micros());
        wifi.sendUDPBroadcast(pulseMessage);
        Serial.println("üì§ Sent: " + pulseMessage);

        // –ú–∏–≥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        digitalWrite(STATUS_LED_PIN, HIGH);
        delay(50);
        digitalWrite(STATUS_LED_PIN, LOW);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ UDP —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[50];
        int len = wifi.udp.read(packet, 50);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);

            Serial.println("üì® Received: " + message);

            if (message == "SYNC") {
                Serial.println("üïí SYNC command received - emitting immediate pulse");
                ultrasound.emitPulse(255);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WiFi –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    static unsigned long lastWifiCheck = 0;
    if (millis() - lastWifiCheck > 30000) {
        lastWifiCheck = millis();
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("üîÑ WiFi reconnecting...");
            wifi.setupSTA();
        } else {
            Serial.println("üì∂ WiFi: " + String(WiFi.SSID()) + " (" + String(WiFi.RSSI()) + "dBm)");
        }
    }

    delay(10);
}
#else
#error "Please define either RECEIVER_NODE or BEACON_NODE in build flags"
#endif
