#include <Arduino.h>

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–°–ò–í–ï–†–ê =====
#ifdef RECEIVER_NODE

#include <WiFi.h>
#include <WiFiUdp.h>
#include "config/config.h"
#include "positioning/positioning.h"
#include "network/wifi_manager.h"
#include "hardware/ultrasound.h"
#include "WIFI_App/WIFI_App.h"
#include "web_server/web_server.h"

PositioningSystem positioning;
WiFiManager wifi;
Ultrasound ultrasound;
WIFI_App wifiApp;
WebService webService;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è TDOA
unsigned long pulseArrivalTimes[3] = {0};
bool pulseDetected[3] = {false};
unsigned long measurementStartTime = 0;
bool measurementCycleActive = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–º
unsigned long lastObjectCommand = 0;
bool objectSoundEnabled = false;
int measurementCount = 0;

void calculatePosition();

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üöÄ –°–ò–°–¢–ï–ú–ê –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø - –ü–†–ò–ï–ú–ù–ò–ö ===");
    Serial.println("–†–µ–∂–∏–º: TDOA —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º");
    Serial.println("–í–µ—Ä—Å–∏—è: —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–º");

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WiFi AP
    Serial.println("üì° –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ WiFi...");
    wifiApp.begin();

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    Serial.println("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...");
    webService.begin();

    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    Serial.println("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
    positioning.begin();

    Serial.println("üì° –ó–∞–ø—É—Å–∫ UDP...");
    wifi.startUDP();

    Serial.println("üé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–≥–æ –ø—Ä–∏–µ–º–Ω–∏–∫–∞...");
    ultrasound.setupReceiver();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    Serial.println("üì∂ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ WiFi: " + String(WIFI_SSID));
    Serial.println("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://" + WiFi.softAPIP().toString());
    Serial.println("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º");
}

void startMeasurementCycle() {
    measurementCount++;
    measurementCycleActive = true;
    measurementStartTime = millis();

    Serial.println("\n=== üîÑ –¶–ò–ö–õ –ò–ó–ú–ï–†–ï–ù–ò–Ø #" + String(measurementCount) + " ===");
    Serial.println("üîÑ –û–¢–ü–†–ê–í–ö–ê –ö–û–ú–ê–ù–î –ú–ê–Ø–ö–ê–ú –ò –û–ë–™–ï–ö–¢–£...");

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –æ–∂–∏–¥–∞–Ω–∏—è
    memset(pulseDetected, 0, sizeof(pulseDetected));
    pulseArrivalTimes[0] = micros();

    // –ö–æ–º–∞–Ω–¥–∞ –º–∞—è–∫–∞–º
    wifi.sendUDPBroadcast("START");
    Serial.println("üì° –ö–æ–º–∞–Ω–¥–∞ START –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—è–∫–∞–º");

    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–±—ä–µ–∫—Ç—É —á–µ—Ä–µ–∑ 500ms
    objectSoundEnabled = true;
    lastObjectCommand = millis();

    Serial.println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 500ms –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π –æ–±—ä–µ–∫—Ç—É...");
}

void processBeaconTime(int beaconId, unsigned long beaconTime) {
    pulseArrivalTimes[beaconId] = beaconTime;
    pulseDetected[beaconId] = true;

    Serial.println("üìä –ú–∞—è–∫ " + String(beaconId) + " –≤—Ä–µ–º—è: " + String(beaconTime) + " –º–∫—Å");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å TDOA —Ä–∞—Å—á–µ—Ç–∞
    if (pulseDetected[0] && pulseDetected[1] && pulseDetected[2]) {
        Serial.println("üéØ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´ - –í–û–ó–ú–û–ñ–ï–ù –†–ê–°–ß–ï–¢ TDOA!");
        calculatePosition();
    }
}

void calculatePosition() {
    Serial.println("\n=== üßÆ –†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò ===");

    // –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    Serial.println("   –ü—Ä–∏–µ–º–Ω–∏–∫: " + String(pulseArrivalTimes[0]) + " –º–∫—Å");
    Serial.println("   –ú–∞—è–∫ 1: " + String(pulseArrivalTimes[1]) + " –º–∫—Å");
    Serial.println("   –ú–∞—è–∫ 2: " + String(pulseArrivalTimes[2]) + " –º–∫—Å");

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏
    long diff1 = pulseArrivalTimes[1] - pulseArrivalTimes[0];
    long diff2 = pulseArrivalTimes[2] - pulseArrivalTimes[0];

    Serial.println("   –†–∞–∑–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏: " + String(diff1) + " –º–∫—Å, " + String(diff2) + " –º–∫—Å");

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (—Å–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞ 34300 —Å–º/—Å)
    float distance1 = (diff1 / 1000000.0) * 34300.0;
    float distance2 = (diff2 / 1000000.0) * 34300.0;

    Serial.println("   –†–∞—Å—Å—Ç–æ—è–Ω–∏—è: " + String(distance1) + " —Å–º, " + String(distance2) + " —Å–º");

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    float distances[3] = {0, distance1, distance2};
    Position pos = positioning.trilaterate(distances);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞
    PositionData webPos;
    webPos.x = pos.x;
    webPos.y = pos.y;
    webPos.accuracy = pos.accuracy;
    webPos.timestamp = millis();
    webPos.valid = (pos.accuracy < 50.0);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–∏—Å
    webService.updatePosition(webPos);

    Serial.printf("üìç –ü–æ–∑–∏—Ü–∏—è: X=%.1f—Å–º, Y=%.1f—Å–º, –¢–æ—á–Ω–æ—Å—Ç—å=%.1f—Å–º\n",
                 pos.x, pos.y, pos.accuracy);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏–π
    measurementCycleActive = false;
    memset(pulseDetected, 0, sizeof(pulseDetected));

    Serial.println("‚úÖ –¶–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void loop() {
    // –ú–∏–≥–∞–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 1000) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ START –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    static unsigned long lastStartCommand = 0;
    if (webService.isMeasuring() && millis() - lastStartCommand > 2000) {
        lastStartCommand = millis();
        startMeasurementCycle();
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—É–∫–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    if (objectSoundEnabled && (millis() - lastObjectCommand > 500)) {
        objectSoundEnabled = false;
        Serial.println("üîä –û–¢–ü–†–ê–í–ö–ê –ö–û–ú–ê–ù–î–´ –ó–í–£–ö–ê –û–ë–™–ï–ö–¢–£");
        wifi.sendUDPBroadcast("SOUND_ON");
    }

    // –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∞
    static unsigned long lastSensorRead = 0;
    if (millis() - lastSensorRead > 50) {
        lastSensorRead = millis();

        if (ultrasound.detectPulse()) {
            unsigned long arrivalTime = micros();
            pulseArrivalTimes[0] = arrivalTime;
            pulseDetected[0] = true;

            Serial.println("üéØ –ò–ú–ü–£–õ–¨–° –û–ë–ù–ê–†–£–ñ–ï–ù! –í—Ä–µ–º—è: " + String(arrivalTime) + " –º–∫—Å");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –º–∞—è–∫–∞–º
            wifi.sendUDPBroadcast("REQUEST_TIME:" + String(arrivalTime));
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö UDP —Å–æ–æ–±—â–µ–Ω–∏–π
    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[150];
        int len = wifi.udp.read(packet, 150);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);
            String senderIP = wifi.udp.remoteIP().toString();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –º–∞—è–∫–æ–≤
            if (message.startsWith("BEACON_TIME:")) {
                int beaconId = message.substring(12, 13).toInt();
                unsigned long beaconTime = message.substring(14).toInt();
                processBeaconTime(beaconId, beaconTime);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–±—ä–µ–∫—Ç–∞
            else if (message.startsWith("OBJECT_SOUND:")) {
                Serial.println("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ–±—ä–µ–∫—Ç–∞: " + message);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
            else if (message.startsWith("OBJECT_STATUS:")) {
                Serial.println("üìä –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞: " + message);
            }
            else {
                Serial.println("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + senderIP + ": " + message);
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    static unsigned long lastPositionUpdate = 0;
    if (millis() - lastPositionUpdate > 1000) {
        lastPositionUpdate = millis();

        positioning.update();
        Position pos = positioning.getCurrentPosition();

        PositionData webPos;
        webPos.x = pos.x;
        webPos.y = pos.y;
        webPos.accuracy = pos.accuracy;
        webPos.timestamp = millis();
        webPos.valid = (pos.accuracy < 50.0);

        webService.updatePosition(webPos);
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    static unsigned long lastDiagnostic = 0;
    if (millis() - lastDiagnostic > 30000) {
        lastDiagnostic = millis();
        Serial.println("\n=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ò–ï–ú–ù–ò–ö–ê ===");
        Serial.println("   WiFi –∫–ª–∏–µ–Ω—Ç–æ–≤: " + String(WiFi.softAPgetStationNum()));
        Serial.println("   IP: " + WiFi.softAPIP().toString());
        Serial.println("   –¶–∏–∫–ª–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π: " + String(measurementCount));
        Serial.println("   –ê–∫—Ç–∏–≤–µ–Ω —Ü–∏–∫–ª: " + String(measurementCycleActive ? "–î–∞" : "–ù–µ—Ç"));
        Serial.println("   –ò–∑–º–µ—Ä–µ–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: " + String(webService.isMeasuring() ? "–í–∫–ª" : "–í—ã–∫–ª"));
        Serial.println("   –ü–∞–º—è—Ç—å: " + String(esp_get_free_heap_size()) + " –±–∞–π—Ç");
    }

    delay(50);
}

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ê–Ø–ö–ê =====
#elif BEACON_NODE

#include "config/config.h"
#include "network/wifi_manager.h"
#include "hardware/ultrasound.h"

WiFiManager wifi;
Ultrasound ultrasound;

void testSpeaker();
void emitSimplePulse();

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("\n=== üéØ POSITIONING SYSTEM - BEACON ===");
    Serial.println("Beacon ID: " + String(BEACON_ID));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    Serial.println("Connecting to WiFi...");
    wifi.setupSTA();

    Serial.println("Starting UDP client...");
    wifi.startUDP();

    Serial.println("Setting up ultrasound transmitter...");
    ultrasound.setupTransmitter();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    Serial.println("üîä TEST: Initial speaker test...");
    testSpeaker();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
    pinMode(STATUS_LED_PIN, OUTPUT);
    digitalWrite(STATUS_LED_PIN, HIGH);

    Serial.println("‚úÖ Beacon initialization completed!");
}

void testSpeaker() {
    Serial.println("üéµ Testing speaker...");

    #ifdef BEACON_NODE
    #if BEACON_ID == 1
    Serial.println("   KY-006 Passive Buzzer Test");
    for(int i = 0; i < 3; i++) {
        digitalWrite(STATUS_LED_PIN, HIGH);
        Serial.println("   Beep " + String(i+1) + " - Generating 40kHz");

        unsigned long startTime = micros();
        while (micros() - startTime < 200000) {
            digitalWrite(ULTRASOUND_TX_PIN, HIGH);
            delayMicroseconds(12);
            digitalWrite(ULTRASOUND_TX_PIN, LOW);
            delayMicroseconds(12);
        }

        digitalWrite(STATUS_LED_PIN, LOW);
        delay(200);
    }

    #elif BEACON_ID == 2
    Serial.println("   KY-012 Active Buzzer Test");
    for(int i = 0; i < 3; i++) {
        digitalWrite(STATUS_LED_PIN, HIGH);
        Serial.println("   Beep " + String(i+1) + " - PWM 40kHz");

        ledcWrite(0, 127);
        delay(200);
        ledcWrite(0, 0);

        digitalWrite(STATUS_LED_PIN, LOW);
        delay(200);
    }
    #endif
    #endif

    Serial.println("‚úÖ Speaker test completed");
}

void emitSimplePulse() {
    Serial.println("üîä EMITTING ULTRASOUND PULSE");

    #ifdef BEACON_NODE
    #if BEACON_ID == 1
    Serial.println("   KY-006: Software 40kHz generation");
    unsigned long startTime = micros();
    long cycleCount = 0;

    while (micros() - startTime < 100000) {
        digitalWrite(ULTRASOUND_TX_PIN, HIGH);
        delayMicroseconds(12);
        digitalWrite(ULTRASOUND_TX_PIN, LOW);
        delayMicroseconds(12);
        cycleCount++;
    }
    Serial.println("   Generated " + String(cycleCount) + " cycles");

    #elif BEACON_ID == 2
    Serial.println("   KY-012: PWM 40kHz");
    ledcWrite(0, 127);
    delay(100);
    ledcWrite(0, 0);
    Serial.println("   PWM tone completed");
    #endif
    #endif
}

void loop() {
    static unsigned long lastLedToggle = 0;
    if (millis() - lastLedToggle > 1000) {
        digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
        lastLedToggle = millis();
    }

    int packetSize = wifi.udp.parsePacket();
    if (packetSize) {
        char packet[100];
        int len = wifi.udp.read(packet, 100);
        if (len > 0) {
            packet[len] = 0;
            String message = String(packet);
            String senderIP = wifi.udp.remoteIP().toString();

            Serial.println("=== üì® UDP MESSAGE RECEIVED ===");
            Serial.println("   From: " + senderIP);
            Serial.println("   Message: " + message);
            Serial.println("   Length: " + String(len));

            if (message == "START") {
                Serial.println("üöÄ START COMMAND RECEIVED - EMITTING SOUND!");

                for(int i = 0; i < 5; i++) {
                    digitalWrite(STATUS_LED_PIN, HIGH);
                    delay(100);
                    digitalWrite(STATUS_LED_PIN, LOW);
                    delay(100);
                }

                int delayTime = 100 + (BEACON_ID * 100);
                Serial.println("‚è≥ Waiting " + String(delayTime) + "ms before sound...");
                delay(delayTime);

                Serial.println("üîä EMITTING ULTRASOUND PULSE...");
                emitSimplePulse();

                Serial.println("‚úÖ Ultrasound emission completed");

                unsigned long currentTime = micros();
                String ackMessage = "BEACON_TIME:" + String(BEACON_ID) + ":" + String(currentTime);
                wifi.sendUDPBroadcast(ackMessage);
                Serial.println("üì§ Sent time: " + ackMessage);

            } else {
                Serial.println("‚ùì Unknown command: " + message);
            }
        }
    }

    static unsigned long lastDiagnostic = 0;
    if (millis() - lastDiagnostic > 10000) {
        lastDiagnostic = millis();
        Serial.println("=== üîç BEACON DIAGNOSTIC ===");
        Serial.println("   WiFi: " + String(WiFi.SSID()) + " (" + String(WiFi.RSSI()) + "dBm)");
        Serial.println("   IP: " + WiFi.localIP().toString());
        Serial.println("   Status: Waiting for START command");
        Serial.println("   Beacon ID: " + String(BEACON_ID));
    }

    static unsigned long lastWifiCheck = 0;
    if (millis() - lastWifiCheck > 10000) {
        lastWifiCheck = millis();
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("üîÑ WiFi reconnecting...");
            wifi.setupSTA();
        }
    }

    delay(100);
}

// ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–ê =====
#elif OBJECT_NODE

#include <WiFi.h>
#include <WiFiUdp.h>

#define SOUND_PIN 25
#define STATUS_LED_PIN 2
#define UDP_PORT 1234
#define PULSE_DURATION 15
#define OBJECT_ID 3
#define BETWEEN_PULSE_DELAY 10

WiFiUDP udp;
unsigned long lastSoundTime = 0;
int soundCount = 0;

void setupWiFi() {
  Serial.println("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.print("üì∂ IP: ");
    Serial.println(WiFi.localIP());
    digitalWrite(STATUS_LED_PIN, HIGH);
  } else {
    Serial.println("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi!");
    digitalWrite(STATUS_LED_PIN, LOW);
  }
}

void emitSinglePulse() {
  unsigned long startTime = micros();

  while (micros() - startTime < PULSE_DURATION * 1000) {
    digitalWrite(SOUND_PIN, HIGH);
    delayMicroseconds(12);
    digitalWrite(SOUND_PIN, LOW);
    delayMicroseconds(12);
  }
}

void emitCodedSound() {
  soundCount++;
  Serial.println("üéµ –ò–°–ü–£–°–ö–ê–Æ –ö–û–î–ò–†–û–í–ê–ù–ù–´–ô –ó–í–£–ö - ID: " + String(OBJECT_ID));
  digitalWrite(STATUS_LED_PIN, HIGH);

  for (int i = 0; i < OBJECT_ID; i++) {
    Serial.println("   üîä –ò–º–ø—É–ª—å—Å " + String(i+1) + "/" + String(OBJECT_ID));
    emitSinglePulse();

    if (i < OBJECT_ID - 1) {
      delay(BETWEEN_PULSE_DELAY);
    }
  }

  digitalWrite(STATUS_LED_PIN, LOW);
  lastSoundTime = millis();
  Serial.println("‚úÖ –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω");
}

void sendSoundConfirmation() {
  String ack = "OBJECT_SOUND:" + String(millis()) + ":COUNT:" + String(soundCount);

  IPAddress broadcastIP(192, 168, 4, 255);
  udp.beginPacket(broadcastIP, UDP_PORT);
  udp.print(ack);
  udp.endPacket();

  Serial.println("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: " + ack);
}

void setup() {
  Serial.begin(115200);
  pinMode(SOUND_PIN, OUTPUT);
  pinMode(STATUS_LED_PIN, OUTPUT);
  digitalWrite(SOUND_PIN, LOW);
  digitalWrite(STATUS_LED_PIN, LOW);

  delay(1000);

  Serial.println("\n=== üéØ ESP32 –û–ë–™–ï–ö–¢ –°–û –ó–í–£–ö–û–ú ===");
  Serial.println("üîä –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º: GPIO25 ‚Üí BC547 ‚Üí PAM8403");
  Serial.println("üìç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: " + String(OBJECT_ID) + " –∏–º–ø—É–ª—å—Å–æ–≤");
  Serial.println("üì° –°–µ—Ç—å: " + String(WIFI_SSID));

  setupWiFi();
  udp.begin(UDP_PORT);

  Serial.println("\nüîä –¢–ï–°–¢ –ü–†–ò –ó–ê–ü–£–°–ö–ï...");
  emitCodedSound();
  sendSoundConfirmation();

  Serial.println("\n‚úÖ –û–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
  Serial.println("üéØ –û–∂–∏–¥–∞–Ω–∏–µ UDP –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É " + String(UDP_PORT));
}

void loop() {
  static unsigned long lastBlink = 0;
  if (millis() - lastBlink > 1000) {
    digitalWrite(STATUS_LED_PIN, !digitalRead(STATUS_LED_PIN));
    lastBlink = millis();
  }

  int packetSize = udp.parsePacket();
  if (packetSize) {
    char packet[100];
    int len = udp.read(packet, sizeof(packet) - 1);
    if (len > 0) {
      packet[len] = 0;
      String message = String(packet);
      String senderIP = udp.remoteIP().toString();

      Serial.println("\nüì® UDP –û–¢ " + senderIP + ": " + message);

      if (message == "START" || message == "SOUND_ON" || message == "SOUND") {
        Serial.println("üöÄ –ö–û–ú–ê–ù–î–ê –ó–í–£–ö–ê –ü–û–õ–£–ß–ï–ù–ê - –ò–°–ü–£–°–ö–ê–Æ –ó–í–£–ö");
        emitCodedSound();
        sendSoundConfirmation();
      }
      else if (message == "STATUS") {
        Serial.println("üìä –ó–ê–ü–†–û–° –°–¢–ê–¢–£–°–ê");
        String status = "OBJECT_STATUS:ID=" + String(OBJECT_ID) +
                       ",IP=" + WiFi.localIP().toString() +
                       ",RSSI=" + String(WiFi.RSSI()) +
                       ",COUNT=" + String(soundCount);
        udp.beginPacket(udp.remoteIP(), UDP_PORT);
        udp.print(status);
        udp.endPacket();
        Serial.println("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: " + status);
      }
    }
  }

  static unsigned long lastDiagnostic = 0;
  if (millis() - lastDiagnostic > 30000) {
    lastDiagnostic = millis();
    Serial.println("=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–™–ï–ö–¢–ê ===");
    Serial.println("   WiFi: " + String(WiFi.SSID()) + " (" + String(WiFi.RSSI()) + "dBm)");
    Serial.println("   IP: " + WiFi.localIP().toString());
    Serial.println("   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: " + String(soundCount));
    Serial.println("   –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: " + String((millis() - lastSoundTime) / 1000) + " —Å–µ–∫ –Ω–∞–∑–∞–¥");
  }

  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command == "TEST" || command == "T") {
      Serial.println("üîä –†–£–ß–ù–û–ô –¢–ï–°–¢");
      emitCodedSound();
      sendSoundConfirmation();
    }
    else if (command == "STATUS" || command == "S") {
      Serial.println("=== –°–¢–ê–¢–£–° –û–ë–™–ï–ö–¢–ê ===");
      Serial.println("–ü–∏–Ω –∑–≤—É–∫–∞: GPIO" + String(SOUND_PIN));
      Serial.println("ID –æ–±—ä–µ–∫—Ç–∞: " + String(OBJECT_ID) + " –∏–º–ø—É–ª—å—Å–æ–≤");
      Serial.println("WiFi: " + String(WiFi.SSID()));
      Serial.println("–°–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + String(soundCount));
    }
    else if (command == "WIFI" || command == "W") {
      Serial.println("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WiFi...");
      setupWiFi();
    }
  }

  delay(100);
}

#else
#error "Please define either RECEIVER_NODE, BEACON_NODE or OBJECT_NODE in build flags"
#endif
